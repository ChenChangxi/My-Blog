<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ccx</groupId>
    <artifactId>myblog</artifactId>
    <!--父模块都打成pom-->
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <!--聚合的子模块，父模块不提供子模块间的相互通信子模
    模块需要调用其他子模块需要引入依赖，每个子模块需要执行
    打包命令，注册到maven仓库中-->
    <modules>
        <module>ccx-system</module>
        <module>ccx-framework</module>
        <module>ccx-common</module>
        <module>ccx-test</module>
        <module>ccx-interact</module>
    </modules>

    <description>
        这是我用SpringBoot写的一个博客，分为前端和后端。
        这是后台管理系统，它用了MongoDB作为数据库，使用
        了SpringMVC处理Web请求，并且我用了Maven的分模
        块开发，把不同的模块抽象出来，极大的方便了开发，
        最后通过Maven的聚合功能把不同的功能模块聚合在一
        起。之所以选择SpringBoot我也是考率到后续可以用
        SpringCloud来扩展到分布式和高并发应用。
    </description>

    <!--Maven的属性值管理，这里是为了统一管理各个模块的
    版本，熟悉JavaEE开发的，被各种莫名其妙的bug给折磨过
    人都知道版本控制问题有多么的重要。-->
    <properties>
        <ccx.version>1.0-SNAPSHOT</ccx.version>
        <springboot.version>2.1.1.RELEASE</springboot.version>
        <alibaba.druid.version>1.1.14</alibaba.druid.version>
        <mysql.version>5.1.35</mysql.version>
        <mybatis.version>1.3.0</mybatis.version>
        <morphia.version>1.1.1</morphia.version>
        <shiro.version>1.4.0</shiro.version>
        <pagehelper.version>1.2.5</pagehelper.version>
    </properties>

    <!--它是一个依赖声明，它不引入具体的jar包，子模块需要
    引入来使用具体的jar包，但不指定具体的版本，换而言之，
    它其实提供的是一个统一版本管理功能。-->
    <dependencyManagement>
        <dependencies>
            <!--这是引入SpringBoot依赖的一种方式，从parent(pom)当中导入
            (import)dependencyManagement，还有一种是直接将SpringBoot
            模块指定为父模块，然后在dependencies中引用。以下方法是专门为
            dependencyManagement而设计的。-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${springboot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--项目还是需要sql数据库的，因为在顶层设计中有关于
            类似于微博的功能，不用像博客那样需要的大型分布式文件
            管理数据库，只是用普通的sql数据库即可-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>

            <!--阿里巴巴的数据库连接池，数据库连接池的意义就在于
            它创建了很多连接对象，当用户访问数据库的时候不用一个
            一个的建立连接，而是会从连接池中取出一个对象，用户跟
            这个对象交互，连接完后对象放回连接池中，也就是说可以
            复用连接池所创立的链接，极大提高了系统的性能-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${alibaba.druid.version}</version>
            </dependency>

            <!--导入mybatis模块，它是sql的ORM框架-->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.version}</version>
            </dependency>

            <!-- pagehelper分页插件。熟悉开发的朋友也知道分页
            查询是非常重要的一种查询，也是比较难的一种查询，sql
            提供的关键字比较繁琐，当然还有其他方法实现，但在spr
            ingboot中可以用pagehelper这个分页插件来实现-->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>

            <!--导入morphia模块，他是mongodb的ORM框架-->
            <dependency>
                <groupId>org.mongodb.morphia</groupId>
                <artifactId>morphia</artifactId>
                <version>${morphia.version}</version>
            </dependency>

            <!--导入shiro框架，它是专门负责权限控制的一个框架-->
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-spring</artifactId>
                <version>${shiro.version}</version>
            </dependency>

            <!--在这里导入各个模块也是为了方便进行版本管理，在这里定义以后
            ，在构建各个模块相互依赖时，就不用加版本号了，一切交给父模块的
             dependencyManagement来进行管理-->

            <!--导入admin模块-->
            <dependency>
                <groupId>com.ccx</groupId>
                <artifactId>interact</artifactId>
                <version>${ccx.version}</version>
            </dependency>

            <!--导入common模块-->
            <dependency>
                <groupId>com.ccx</groupId>
                <artifactId>common</artifactId>
                <version>${ccx.version}</version>
            </dependency>

            <!--导入system模块-->
            <dependency>
                <groupId>com.ccx</groupId>
                <artifactId>system</artifactId>
                <version>${ccx.version}</version>
            </dependency>

            <!--导入framework模块-->
            <dependency>
                <groupId>com.ccx</groupId>
                <artifactId>framework</artifactId>
                <version>${ccx.version}</version>
            </dependency>

            <!--导入test模块-->
            <dependency>
                <groupId>com.ccx</groupId>
                <artifactId>test</artifactId>
                <version>${ccx.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

</project>